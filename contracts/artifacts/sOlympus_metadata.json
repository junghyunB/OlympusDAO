{
	"compiler": {
		"version": "0.7.5+commit.eb77ed08"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rebase",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "LogRebase",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "stakingContract",
						"type": "address"
					}
				],
				"name": "LogStakingContractUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalSupply",
						"type": "uint256"
					}
				],
				"name": "LogSupply",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipPulled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipPushed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "INDEX",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "PERMIT_TYPEHASH",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "TOTAL_GONS",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "_gonBalances",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_gonsPerFragment",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "previousCirculating_",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "profit_",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "epoch_",
						"type": "uint256"
					}
				],
				"name": "_storeRebase",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "gons",
						"type": "uint256"
					}
				],
				"name": "balanceForGons",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "who",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "circulatingSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedValue",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "gonsForBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "index",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "stakingContract_",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "initializer",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "manager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pullManagement",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner_",
						"type": "address"
					}
				],
				"name": "pushManagement",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "profit_",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "epoch_",
						"type": "uint256"
					}
				],
				"name": "rebase",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "rebases",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "epoch",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rebase",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalStakedBefore",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalStakedAfter",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountRebased",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "blockNumberOccured",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceManagement",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_INDEX",
						"type": "uint256"
					}
				],
				"name": "setIndex",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "stakingContract",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
			"kind": "dev",
			"methods": {
				"_storeRebase(uint256,uint256,uint256)": {
					"params": {
						"epoch_": "uint",
						"previousCirculating_": "uint",
						"profit_": "uint"
					},
					"returns": {
						"_0": "bool"
					}
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
				},
				"increaseAllowance(address,uint256)": {
					"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"nonces(address)": {
					"details": "See {IERC2612Permit-nonces}."
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "See {IERC2612Permit-permit}."
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"_storeRebase(uint256,uint256,uint256)": {
					"notice": "emits event with data about rebase"
				},
				"constructor": {
					"notice": "constructor()함수   토큰 이름, symbol, decimal, initalizer, 현재까지 총 발행량, 조각당gon값을 세팅"
				},
				"initialize(address)": {
					"notice": "initalize() 함수 stakingContract 주소 세팅, 이주소의 gon자산값 세팅하는 함수"
				},
				"rebase(uint256,uint256)": {
					"notice": "rebase 함수 : profit_ epoch_값을 넣어서 실행 StakingContract 컨트랙트 주소만 호출 가능 함수 내부에서 쓰일 rebaseAmount 변수 선언, circulatingSupply는 circulationSupply()함수의 호출값으로 설정 경우 1 profit_ == 0일때 _totalSupply값을 return 하고 함수 종료 경우 2 circulationgSupply 값이 0보다 클때 rebaseAmount값을 profit_ * _totalSupply / circulatingSupply_값으로 변경 -> 총발행량을 이전 총발행량 + rebaseAmount값으로 변경 -> 변경된 총발행량이 최대 발행량보다 많아지면 총발행량을 최대발행량이랑 같도록 변경 -> 조각당_gon깂을 총GONS / 총발행량으로 변경 -> _storeRebase함수에 매개변수를 넣어 호출 -> 변경된 총 발행량 값을 리턴 위 두 경우에 포함이 안되어있을때 rebaseAmount값을 profit_ 로 변경 -> 발행량을 이전 총발행량 + rebaseAmount값으로 변경 -> 변경된 총발행량이 최대 발행량보다 많아지면 총발행량을 최대발행량이랑 같도록 변경 -> 조각당_gon깂을 총GONS / 총발행량으로 변경 -> _storeRebase함수에 매개변수를 넣어 호출 -> 변경된 총 발행량 값을 리턴"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/sOHM.sol": "sOlympus"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Ownable.sol": {
			"keccak256": "0xc06b738394e17f021133584ce4d7fff480d90e9fcacf2605c22e6a3b31c1cb94",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://e140b3042cc6c26467e60a0c78fd5a1e86fbe956ef6d8dbab07da22467641c04",
				"dweb:/ipfs/QmZPNj1VkWVmaWpu3CwB7hHq8oiAdyiPsPiEeCcz79KSMq"
			]
		},
		"contracts/interfaces/IERC20.sol": {
			"keccak256": "0xaef2d7d42eb10852e00f6ac29249f435cf5fd4391fbeb151e04c34558bf22ad7",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://8c8befcd3203d01429bfc37c550b7535509623141376b65e4caf2cb7100ad503",
				"dweb:/ipfs/QmPF29x7Cp4BVf1y1NRsvdb7EDtx6KchjP9gqaSqdyxHRe"
			]
		},
		"contracts/interfaces/IERC2612Permit.sol": {
			"keccak256": "0x2b28bfc4e0621eb60b914917dc916cc08ba97eee0a3b06d98fe56ff9ce2c0d59",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://0b5ddc8c3db72e2cd69a8defcc016910454578b7f46899a7ce0bdec603e58640",
				"dweb:/ipfs/QmYNhiaGjMdGXhooPCTxW3AYNWFii9WSkUcR4KkPqvRM3S"
			]
		},
		"contracts/interfaces/IOwnable.sol": {
			"keccak256": "0xcbe7146e57c25291f32af9e051e9c3a15f42f79f25c2fbef37a667dd82e00357",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://648792fddf1a8dc11deb4973ee579ae8cf66ce084f37c5b956c2157fb951e832",
				"dweb:/ipfs/QmNS7Jn8tGipLFmbm7MLGsMMrXMBENbvnYENK45SBnSkeG"
			]
		},
		"contracts/libraries/Address.sol": {
			"keccak256": "0x21514997ee188f5f8a0daa04e753e8351fa4eb63f5a58dd83db476ce843e06d2",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://beb38d20dbe4e9e63a494f5c77e0aea8c02b2d3d65245662155d2637cfb47e18",
				"dweb:/ipfs/QmNnrPXntFNVATQboeTbFtQcfkziQ2wJiUKrzsggacSA3z"
			]
		},
		"contracts/libraries/Counters.sol": {
			"keccak256": "0x7803a8db31ab4407c907b44536f70e1c460835997bb31cdf67a7f8ed0edf7f9e",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://a6b92404baa42cc67f22266ea5f6967cc1039b1443f9743a151b78994ee97820",
				"dweb:/ipfs/Qmdm7doaGJN599BEQCrmY6VKNSynmYrzhYnBK9LK9mXnJo"
			]
		},
		"contracts/libraries/SafeMath.sol": {
			"keccak256": "0x6d3320fabf88899419574e2eb69b48fb5e05ef1eeedbc8e780a6f1731184f2b7",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://575afee9386dcde7b4f734c31d19ca707cf405568ebf17cf84a053074a0fa496",
				"dweb:/ipfs/QmZaE7QXR14sJi4oK4NxW2g5YoFkGFMtGdDBBNHHzCuLCL"
			]
		},
		"contracts/sOHM.sol": {
			"keccak256": "0x90b2bf2a425a490ea390d92a5e805fec489fb05dd7be3aa5762ff520b45f3144",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://15a41cc69daf9150ffadf7f3736308c3be0ebd6adc568a8458ebb629c52ae1ea",
				"dweb:/ipfs/QmQXKXXHdKx1wY4a3zF42nvRmxTkWyPa12P6AgQq9EySxj"
			]
		},
		"contracts/types/ERC20.sol": {
			"keccak256": "0xa1b58a3231d7efe286f6bf32ecbdbd2a8a8395c70da96d960e3e0ecf1a6e0aa2",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://8fcb5129cdae755dabf3798f92161941944f899154a0eaab2dda0a1e5f78ee03",
				"dweb:/ipfs/QmSRzMKPL8kYhc521GKDuzgyHvqFsP5VMxw532XXadyBNV"
			]
		},
		"contracts/types/ERC20Permit.sol": {
			"keccak256": "0xea1d7e9f03035c6e454dddd84ca8693b6305868b4a85de215bea6ed487ae52bd",
			"license": "AGPL-3.0-or-later",
			"urls": [
				"bzz-raw://ceb0f9bc321a996264ca07300e6fe5eefddfa05ed1c230b6ebdde3f395067604",
				"dweb:/ipfs/QmbrBvTNjEQjCkNgLTucBBMmRFzNqY9xPmMZuNiHzPJcPq"
			]
		}
	},
	"version": 1
}